{"version":3,"sources":["components/StarRating/StarRating.js","components/Card.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["StarRating","props","stars","i","total","push","color","value","activeColor","Fragment","Card","className","data","promoted","style","background","image","rating","rating_remarks","tags","map","tag","key","ranking","college_name","fontSize","nearest_place","place","undefined","length","famous_nearest_places","original_fees","discount","discounted_fees","fees_cycle","offertext","amenties","join","CardList","useState","colleges","setColleges","page","setPage","reachedEnd","setReachedEnd","handleScroll","e","target","scrollingElement","scrollHeight","scrollTop","clientHeight","start","next10Colleges","collegeData","slice","useEffect","console","log","window","addEventListener","removeEventListener","position","college","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b3c4ae5.chunk.js","sourcesContent":["import React from 'react';\nimport {FaStar} from \"react-icons/fa\";\n\nfunction StarRating(props) {\n\n    const stars=[];\n\n    for(let i=0;i<(props.total||5); i++ ){\n        stars.push(<FaStar color={i<props.value? (props.activeColor||\"#444\") : (props.color||\"#adadad\") } />)\n    }\n\n    return (\n        <React.Fragment>\n            {stars}\n        </React.Fragment>\n    )\n}\n\n\nexport default StarRating\n\n","import React, { useState } from 'react';\nimport \"./cards.css\";\nimport StarRating from './StarRating/StarRating';\n\nfunction Card(props) {\n    return (\n        <div className=\"card-wrapper\">\n        {props.data.promoted?<div className=\"promoTag\"> PROMOTED </div>:null}\n        <div className=\"card\">\n            <div className=\"cover\" style={{background:`linear-gradient(210.64deg, #00000098 15.51%, #00000080 114.31%), url(\"./${props.data.image}\")`}} >\n\n                <div className=\"rating\">\n                    <span className=\"val\" >{props.data.rating}</span>/5\n                    <br/>\n                    <span> {props.data.rating_remarks} </span>\n                </div>\n\n                <div className=\"b-row d-flex justify-between align-center\">\n                    <div>\n                        {props.data.tags.map((tag,i)=>(  \n                            <div className=\"tag\" key={i}> {tag} </div>\n                        ))}\n                    </div>\n\n                    <div> #{props.data.ranking}  </div>\n                </div>\n\n            </div>\n            <div className=\"body\">\n                <div className=\"main d-flex justify-between\" >\n                    <div className=\"left\">\n                        <div className=\"heading d-flex align-center\">\n                            <h3> {props.data.college_name} </h3>\n                            <div style={{fontSize:\"12px\"}} className=\"ml-1\" > <StarRating value={props.data.rating} /> </div>\n                        </div>\n\n                        <div className=\"mt-2\" style={{fontSize:\"13.5px\"}}> \n                            {props.data.nearest_place.map((place,i)=>(\n                                <span style={{color:i!==0?\"#adadad\":undefined}} > {place} {i!==props.data.nearest_place.length-1 ? \"|\" :\"\"} </span>\n                            ))}\n                        </div>\n                        <div className=\"mt-2\" style={{fontSize:\"13.5px\"}}> \n                            <b className=\"text-blue\"> 93% Match: </b> \n                            {props.data.famous_nearest_places}\n                        </div>\n\n                    </div>\n\n                    <div className=\"right text-right\">\n                        <div style={{fontSize:\"12px\"}}> <del> ₹{props.data.original_fees}</del> <span className=\"discount\" > {props.data.discount} </span> </div>\n                        <h3 className=\"fees\"> ₹{props.data.discounted_fees} </h3>\n                        <p className=\"text-gray\" style={{fontSize:\"12px\"}} > {props.data.fees_cycle} </p>\n                    </div>\n                </div>\n\n                <div className=\"d-flex justify-between align-center mt-2\" style={{fontSize:\"12px\"}} >\n                    <div className=\"offer\" > <b> {props.data.offertext} </b>  </div>\n                    <div style={{color:\"#4bb89e\"}} className=\"text-right text-green p-2\" > <b> {props.data.amenties.join(\" . \")} </b>   </div>\n                </div>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Card;\n\n","import React,{useEffect, useState} from 'react';\nimport Card from \"./Card.js\";\nimport collegeData from \"./colleges.json\";\n\nfunction CardList(props) {\n\n    const [colleges, setColleges] = useState([]);\n    const [page, setPage] = useState(1);\n    const [reachedEnd, setReachedEnd] = useState(false);\n\n    useEffect(()=>{\n        const start= (page-1)*10;\n\n        // As I was Provide By JSON file that I imported but in real worl scenario,\n        // I will request server to get Data According to paging.\n\n        const next10Colleges=collegeData.colleges.slice(start,start+10);\n        console.log(next10Colleges);\n        setColleges([...colleges,...next10Colleges]);\n        setPage(page+1);\n    },[])\n\n    useEffect(()=>{\n        window.addEventListener(\"scroll\",handleScroll);\n        return () => window.removeEventListener(\"scroll\", handleScroll);\n    },[page,reachedEnd])\n\n    function handleScroll(e){\n        // Condition to check whether scroll bar reached end or not...\n        if(e.target.scrollingElement.scrollHeight == (e.target.scrollingElement.scrollTop + e.target.scrollingElement.clientHeight)){\n            if(!reachedEnd){\n                \n                const start= (page-1)*10;\n                const next10Colleges=collegeData.colleges.slice(start,start+10);\n\n                setColleges([...colleges,...next10Colleges]);\n                setPage(page+1);\n                \n                //In Last Page we will always have less than 10 products\n                //except the case of total products in multiple of 10 in that case reached end is set to true next time\n                if(next10Colleges.length<10){\n                    setReachedEnd(true);\n                }\n            }\n        }\n    }\n\n\n    return (\n        <div className=\"d-flex\" style={{position:\"relative\"}} >\n            {colleges.map((college,i)=>(\n                <div className=\"col-lg-6 p-4\" key={i} > <Card data={college} /> </div>\n            ))}\n        </div>\n    )\n}\n\n\nexport default CardList\n\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport CardList from './components/CardList';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n       <h1 className=\"p-4 mainH\" > Colleges In North India </h1>\n       <CardList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}